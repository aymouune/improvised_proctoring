
var isCameraAllowed = false;

define(['jquery', 'core/ajax', 'core/notification'],
    function($, Ajax, Notification) {
        var userid 
        //----------------------------
        function loadLabeledImages() {
            const labels = [userid]
            return Promise.all(
              labels.map(async label => {
                const descriptions = []
                for (let i = 1; i <= 2; i++) {
                  const img = await faceapi.fetchImage(`./accessrule/proctoring/amd/build/labeled_images/${label}/${i}.jpg`)
                  const detections = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor()
                  descriptions.push(detections.descriptor)
                }
                return new faceapi.LabeledFaceDescriptors(label, descriptions)
              })
            )
          }
          
        //----------------------------

    $(function() {
        $('#id_submitbutton').prop("disabled", true);
        $('#id_proctoring').on('change', function() {
            if (this.checked && isCameraAllowed) {
                $('#id_submitbutton').prop("disabled", false);
            } else {
                $('#id_submitbutton').prop("disabled", true);
            }
        });
    });
    /**
     * Function hideButtons
     */
    function hideButtons() {
        $('.mod_quiz-next-nav').prop("disabled", true);
        $('.submitbtns').html('<p class="text text-red red">You need to enable web camera before submitting this quiz!</p>');
    }
    var firstcalldelay = 3000; // 3 seconds after the page load
    var takepicturedelay = 30000; // 30 seconds

    return {


        setup: function(props) {
            userid=props.userid
            // Camshotdelay taken from admin_settings
            takepicturedelay = props.camshotdelay;
            // Skip for summary page
            if (document.getElementById("page-mod-quiz-summary") !== null &&
                document.getElementById("page-mod-quiz-summary").innerHTML.length) {
                return false;
            }
            if (document.getElementById("page-mod-quiz-review") !== null &&
                document.getElementById("page-mod-quiz-review").innerHTML.length) {
                return false;
            }

            var width = props.image_width;
            var height = 172.5; // This will be computed based on the input stream
            var streaming = false;
            var data = null;

            $('#mod_quiz_navblock').append('<div class="card-body p-3"><h3 class="no text-left">Webcam</h3> <br/>'
             + '<video id="video">Video stream not available.</video><canvas id="canvas" style="display:none;"></canvas>'
             + '<div class="output" style="display:none;">'
             + '<img id="photo" alt="The picture will appear in this box."/></div></div>');

            var video = document.getElementById('video');
            var canvas = document.getElementById('canvas');
            var photo = document.getElementById('photo');

            var clearphoto = function() {
                var context = canvas.getContext('2d');
                context.fillStyle = "#AAA";
                context.fillRect(0, 0, canvas.width, canvas.height);
                data = canvas.toDataURL('image/png');
                photo.setAttribute('src', data);
            };

            var takepicture = function() {
                var context = canvas.getContext('2d');
                if (width && height) {
                    canvas.width = width;
                    canvas.height = height;
                    context.drawImage(video, 0, 0, width, height);
                    data = canvas.toDataURL('image/png');
                    photo.setAttribute('src', data);
                    props.webcampicture = data;

                    var wsfunction = 'quizaccess_proctoring_send_camshot';
                    var params = {
                        'courseid': props.courseid,
                        'screenshotid': props.id,
                        'quizid': props.quizid,
                        'webcampicture': data,
                    };

                    var request = {
                        methodname: wsfunction,
                        args: params
                    };

                    Ajax.call([request])[0].done(function(data) {
                        if (data.warnings.length < 1) {
                            // NO; pictureCounter++;
                        } else {
                            if (video) {
                                Notification.addNotification({
                                    message: 'Something went wrong during taking the image.',
                                    type: 'error'
                                });
                            }
                        }
                    }).fail(Notification.exception);
                } else {
                    clearphoto();
                }
            };

            navigator.mediaDevices.getUserMedia({video: true, audio: false})
                .then(function(stream) {
                    video.srcObject = stream;
                    video.play();
                    isCameraAllowed = true;
                    return;
                })
                .catch(function() {
                    hideButtons();
                });

            if (video) {
                video.addEventListener('canplay', function() {
                    if (!streaming) {
                        height = video.videoHeight / (video.videoWidth / width);
                        // Firefox currently has a bug where the height can't be read from
                        // The video, so we will make assumptions if this happens.
                        if (isNaN(height)) {
                            height = width / (4 / 3);
                        }
                        video.setAttribute('width', width);
                        video.setAttribute('height', height);
                        canvas.setAttribute('width', width);
                        canvas.setAttribute('height', height);
                        streaming = true;
                    }
                }, false);

                //--------------------
                
                Promise.all([
                    faceapi.nets.tinyFaceDetector.loadFromUri('./accessrule/proctoring/amd/build/models'),
                    faceapi.nets.faceLandmark68Net.loadFromUri('./accessrule/proctoring/amd/build/models'),
                    faceapi.nets.faceRecognitionNet.loadFromUri('./accessrule/proctoring/amd/build/models'),
                    faceapi.nets.ssdMobilenetv1.loadFromUri('./accessrule/proctoring/amd/build/models')
                  ]).then(start)

                async function start() {
                    video.addEventListener('play', async() => {
                        //const canvas = faceapi.createCanvasFromMedia(video)
                        document.body.append(canvas)
                        const displaySize = { width: width , height: height }
                        faceapi.matchDimensions(canvas, displaySize)
                        const labeledFaceDescriptors = await loadLabeledImages()
                        var fraudCounter=0
                        var counter1 = 0,counter2 = 0
                        var a=0,b=0,c=0

                        const faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, 0.6)
                        setInterval(async () => {
                            const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors()
                            const resizedDetections = faceapi.resizeResults(detections, displaySize)
                            
                            //on teste si l'etudiant regarde face à sa camera-----------------------
                            if(detections[0]!=undefined){
                                a=detections[0].landmarks.positions[16].x - detections[0].landmarks.positions[45].x
                                b=detections[0].landmarks.positions[36].x - detections[0].landmarks.positions[0].x 
                            } 
                            
                            if(Math.abs(a-b) > 20){
                                c++
                                if(c>4){
                                    takepicture()
                                    window.alert("attention il faut rester face à la camera")
                                    c=0
                                    fraudCounter++
                                }                                
                            }else{
                                c=0
                            }
                            //----------------------------------------------------------------------

                            canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height)
                            const results = resizedDetections.map(d => faceMatcher.findBestMatch(d.descriptor))
                            results.forEach((result, i) => {
                            const box = resizedDetections[i].detection.box
                            const drawBox = new faceapi.draw.DrawBox(box, { label: result.toString() })
                            drawBox.draw(canvas)
                            })
                            
                            //faceapi.draw.drawDetections(canvas, resizedDetections)
                            //faceapi.draw.drawFaceLandmarks(canvas, resizedDetections)

                            //on teste si il y a le meme étudiant durant l'exam -----------
                            if(results.length == 1){
                                if(results[0].label.toString() != userid){
                                    console.log("it's you")
                                  counter1++
                                  if(counter1 == 4 ){
                                    takepicture()
                                    window.alert("Attention ")
                                    counter1 = 0
                                    fraudCounter++
                                  }
                                }else {
                                  counter1 = 0
                                }
                              }else{
                                counter2++
                                if(counter2 == 4 ){
                                  takepicture()  
                                  window.alert("Attention ")
                                  counter2 = 0
                                  fraudCounter++
                                }
                              }
                            //--------------------------------------------------------------
                            //s'il y a detection de fraud on fait automatiquement le submit
                            if(fraudCounter == 4){
                                M.mod_quiz = M.mod_quiz || {};
                                var Y = M.mod_quiz.timer.Y;
                                    var input = Y.one('input[name=timeup]');
                                    input.set('value', 1);
                                    var form = input.ancestor('form');
                                    form.submit();
                            }    
                            //--------------------------------------------------------------
                        },600)
                        
                    })
                }
                //--------------------

                // Allow to click picture
                video.addEventListener('click', function(ev) {
                    takepicture();
                    ev.preventDefault();
                }, false);
                setTimeout(takepicture, firstcalldelay);
                setInterval(takepicture, takepicturedelay);
            } else {
                hideButtons();
            }
            return true;
        },
        init: function(props) {
            var width = 320;
            var height = 0; // This will be computed based on the input stream
            var streaming = false;
            var video = null;
            var canvas = null;
            var photo = null;
            var data = null;

            /**
             * Startup
             */
            function startup() {
                video = document.getElementById('video');
                canvas = document.getElementById('canvas');
                photo = document.getElementById('photo');

                if (video) {
                    navigator.mediaDevices.getUserMedia({video: true, audio: false})
                        .then(function(stream) {
                            video.srcObject = stream;
                            video.play();
                            isCameraAllowed = true;
                            return;
                        })
                        .catch(function() {
                            Notification.addNotification({
                                message: 'Please allow camera access in your browser.',
                                type: 'warning'
                            });
                            hideButtons();
                        });

                    video.addEventListener('canplay', function() {
                        if (!streaming) {
                            height = video.videoHeight / (video.videoWidth / width);
                            // Firefox currently has a bug where the height can't be read from
                            // The video, so we will make assumptions if this happens.
                            if (isNaN(height)) {
                                height = width / (4 / 3);
                            }
                            video.setAttribute('width', width);
                            video.setAttribute('height', height);
                            canvas.setAttribute('width', width);
                            canvas.setAttribute('height', height);
                            streaming = true;
                        }
                    }, false);

                    // Allow to click picture
                    video.addEventListener('click', function(ev) {
                        takepicture();
                        ev.preventDefault();
                    }, false);
                } else {
                    hideButtons();
                }
                clearphoto();
            }
            
            /**
             * Clearphoto
             */
            function clearphoto() {
                if (isCameraAllowed) {
                    var context = canvas.getContext('2d');
                    context.fillStyle = "#AAA";
                    context.fillRect(0, 0, canvas.width, canvas.height);

                    data = canvas.toDataURL('image/png');
                    photo.setAttribute('src', data);
                } else {
                    hideButtons();
                }
            }

            /**
             * Takepicture
             */
            function takepicture() {
                var context = canvas.getContext('2d');
                if (width && height) {
                    canvas.width = width;
                    canvas.height = height;
                    context.drawImage(video, 0, 0, width, height);
                    data = canvas.toDataURL('image/png');
                    photo.setAttribute('src', data);

                    var wsfunction = 'quizaccess_proctoring_send_camshot';
                    var params = {
                        'courseid': props.courseid,
                        'screenshotid': props.id,
                        'quizid': props.quizid,
                        'webcampicture': data,
                    };

                    var request = {
                        methodname: wsfunction,
                        args: params
                    };

                    Ajax.call([request])[0].done(function(data) {
                        if (data.warnings.length < 1) {
                            // Not console.log(data);
                        } else {
                            Notification.addNotification({
                                message: 'Something went wrong during taking screenshot.',
                                type: 'error'
                            });
                        }
                    }).fail(Notification.exception);

                } else {
                    clearphoto();
                }
            }

            /**
             * HideButtons
             */
            function hideButtons() {
                $('.mod_quiz-next-nav').prop("disabled", true);
                $('.submitbtns').html(
                    '<p class="text text-red red">You need to enable web camera before submitting this quiz!</p>');
            }

            startup();

            return data;
        }
    };
});
